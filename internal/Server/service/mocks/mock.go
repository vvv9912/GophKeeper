// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	service "GophKeeper/internal/Server/service"
	store "GophKeeper/pkg/store"
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// BuildJWTString mocks base method.
func (m *MockAuth) BuildJWTString(userId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildJWTString", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildJWTString indicates an expected call of BuildJWTString.
func (mr *MockAuthMockRecorder) BuildJWTString(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJWTString", reflect.TypeOf((*MockAuth)(nil).BuildJWTString), userId)
}

// GetUserId mocks base method.
func (m *MockAuth) GetUserId(tokenString string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", tokenString)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockAuthMockRecorder) GetUserId(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockAuth)(nil).GetUserId), tokenString)
}

// MockStoreAuth is a mock of StoreAuth interface.
type MockStoreAuth struct {
	ctrl     *gomock.Controller
	recorder *MockStoreAuthMockRecorder
}

// MockStoreAuthMockRecorder is the mock recorder for MockStoreAuth.
type MockStoreAuthMockRecorder struct {
	mock *MockStoreAuth
}

// NewMockStoreAuth creates a new mock instance.
func NewMockStoreAuth(ctrl *gomock.Controller) *MockStoreAuth {
	mock := &MockStoreAuth{ctrl: ctrl}
	mock.recorder = &MockStoreAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreAuth) EXPECT() *MockStoreAuthMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockStoreAuth) CreateUser(ctx context.Context, login, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreAuthMockRecorder) CreateUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStoreAuth)(nil).CreateUser), ctx, login, password)
}

// GetUserId mocks base method.
func (m *MockStoreAuth) GetUserId(ctx context.Context, login, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", ctx, login, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockStoreAuthMockRecorder) GetUserId(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockStoreAuth)(nil).GetUserId), ctx, login, password)
}

// MockData is a mock of Data interface.
type MockData struct {
	ctrl     *gomock.Controller
	recorder *MockDataMockRecorder
}

// MockDataMockRecorder is the mock recorder for MockData.
type MockDataMockRecorder struct {
	mock *MockData
}

// NewMockData creates a new mock instance.
func NewMockData(ctrl *gomock.Controller) *MockData {
	mock := &MockData{ctrl: ctrl}
	mock.recorder = &MockDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockData) EXPECT() *MockDataMockRecorder {
	return m.recorder
}

// ChangeAllData mocks base method.
func (m *MockData) ChangeAllData(ctx context.Context, userId int64, lastTimeUpdate time.Time) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAllData", ctx, userId, lastTimeUpdate)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAllData indicates an expected call of ChangeAllData.
func (mr *MockDataMockRecorder) ChangeAllData(ctx, userId, lastTimeUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAllData", reflect.TypeOf((*MockData)(nil).ChangeAllData), ctx, userId, lastTimeUpdate)
}

// CreateCredentials mocks base method.
func (m *MockData) CreateCredentials(ctx context.Context, userId int64, data []byte, name, description string) (*service.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, userId, data, name, description)
	ret0, _ := ret[0].(*service.RespData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockDataMockRecorder) CreateCredentials(ctx, userId, data, name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockData)(nil).CreateCredentials), ctx, userId, data, name, description)
}

// CreateCreditCard mocks base method.
func (m *MockData) CreateCreditCard(ctx context.Context, userId int64, data []byte, name, description string) (*service.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditCard", ctx, userId, data, name, description)
	ret0, _ := ret[0].(*service.RespData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCreditCard indicates an expected call of CreateCreditCard.
func (mr *MockDataMockRecorder) CreateCreditCard(ctx, userId, data, name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditCard", reflect.TypeOf((*MockData)(nil).CreateCreditCard), ctx, userId, data, name, description)
}

// CreateFile mocks base method.
func (m *MockData) CreateFile(ctx context.Context, userId int64, data []byte, name, description string) (*service.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, userId, data, name, description)
	ret0, _ := ret[0].(*service.RespData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockDataMockRecorder) CreateFile(ctx, userId, data, name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockData)(nil).CreateFile), ctx, userId, data, name, description)
}

// CreateFileChunks mocks base method.
func (m *MockData) CreateFileChunks(ctx context.Context, userId int64, tmpFile *service.TmpFile, name, description string) (*service.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileChunks", ctx, userId, tmpFile, name, description)
	ret0, _ := ret[0].(*service.RespData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileChunks indicates an expected call of CreateFileChunks.
func (mr *MockDataMockRecorder) CreateFileChunks(ctx, userId, tmpFile, name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileChunks", reflect.TypeOf((*MockData)(nil).CreateFileChunks), ctx, userId, tmpFile, name, description)
}

// GetData mocks base method.
func (m *MockData) GetData(ctx context.Context, userId, userDataId int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, userId, userDataId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockDataMockRecorder) GetData(ctx, userId, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockData)(nil).GetData), ctx, userId, userDataId)
}

// GetFileChunks mocks base method.
func (m *MockData) GetFileChunks(ctx context.Context, userId, userDataId int64, r *http.Request) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileChunks", ctx, userId, userDataId, r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileChunks indicates an expected call of GetFileChunks.
func (mr *MockDataMockRecorder) GetFileChunks(ctx, userId, userDataId, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileChunks", reflect.TypeOf((*MockData)(nil).GetFileChunks), ctx, userId, userDataId, r)
}

// GetFileSize mocks base method.
func (m *MockData) GetFileSize(ctx context.Context, userId, userDataId int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSize", ctx, userId, userDataId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSize indicates an expected call of GetFileSize.
func (mr *MockDataMockRecorder) GetFileSize(ctx, userId, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSize", reflect.TypeOf((*MockData)(nil).GetFileSize), ctx, userId, userDataId)
}

// GetListData mocks base method.
func (m *MockData) GetListData(ctx context.Context, userId int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListData", ctx, userId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListData indicates an expected call of GetListData.
func (mr *MockDataMockRecorder) GetListData(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListData", reflect.TypeOf((*MockData)(nil).GetListData), ctx, userId)
}

// RemoveData mocks base method.
func (m *MockData) RemoveData(ctx context.Context, userId, userDataId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveData", ctx, userId, userDataId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveData indicates an expected call of RemoveData.
func (mr *MockDataMockRecorder) RemoveData(ctx, userId, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveData", reflect.TypeOf((*MockData)(nil).RemoveData), ctx, userId, userDataId)
}

// UpdateData mocks base method.
func (m *MockData) UpdateData(ctx context.Context, userId, userDataId int64, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, userId, userDataId, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockDataMockRecorder) UpdateData(ctx, userId, userDataId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockData)(nil).UpdateData), ctx, userId, userDataId, data)
}

// UploadFile mocks base method.
func (m *MockData) UploadFile(additionalPath string, r *http.Request) (bool, *service.TmpFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", additionalPath, r)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*service.TmpFile)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockDataMockRecorder) UploadFile(additionalPath, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockData)(nil).UploadFile), additionalPath, r)
}

// MockStoreData is a mock of StoreData interface.
type MockStoreData struct {
	ctrl     *gomock.Controller
	recorder *MockStoreDataMockRecorder
}

// MockStoreDataMockRecorder is the mock recorder for MockStoreData.
type MockStoreDataMockRecorder struct {
	mock *MockStoreData
}

// NewMockStoreData creates a new mock instance.
func NewMockStoreData(ctrl *gomock.Controller) *MockStoreData {
	mock := &MockStoreData{ctrl: ctrl}
	mock.recorder = &MockStoreDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreData) EXPECT() *MockStoreDataMockRecorder {
	return m.recorder
}

// ChangeAllData mocks base method.
func (m *MockStoreData) ChangeAllData(ctx context.Context, userId int64, lastTimeUpdate time.Time) ([]store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAllData", ctx, userId, lastTimeUpdate)
	ret0, _ := ret[0].([]store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAllData indicates an expected call of ChangeAllData.
func (mr *MockStoreDataMockRecorder) ChangeAllData(ctx, userId, lastTimeUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAllData", reflect.TypeOf((*MockStoreData)(nil).ChangeAllData), ctx, userId, lastTimeUpdate)
}

// ChangeData mocks base method.
func (m *MockStoreData) ChangeData(ctx context.Context, userId, userDataId int64, lastTimeUpdate time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeData", ctx, userId, userDataId, lastTimeUpdate)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeData indicates an expected call of ChangeData.
func (mr *MockStoreDataMockRecorder) ChangeData(ctx, userId, userDataId, lastTimeUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeData", reflect.TypeOf((*MockStoreData)(nil).ChangeData), ctx, userId, userDataId, lastTimeUpdate)
}

// CreateCredentials mocks base method.
func (m *MockStoreData) CreateCredentials(ctx context.Context, userId int64, data []byte, name, description, hash string) (*store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, userId, data, name, description, hash)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockStoreDataMockRecorder) CreateCredentials(ctx, userId, data, name, description, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockStoreData)(nil).CreateCredentials), ctx, userId, data, name, description, hash)
}

// CreateCreditCard mocks base method.
func (m *MockStoreData) CreateCreditCard(ctx context.Context, userId int64, data []byte, name, description, hash string) (*store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditCard", ctx, userId, data, name, description, hash)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCreditCard indicates an expected call of CreateCreditCard.
func (mr *MockStoreDataMockRecorder) CreateCreditCard(ctx, userId, data, name, description, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditCard", reflect.TypeOf((*MockStoreData)(nil).CreateCreditCard), ctx, userId, data, name, description, hash)
}

// CreateFileData mocks base method.
func (m *MockStoreData) CreateFileData(ctx context.Context, userId int64, data []byte, name, description, hash string) (*store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileData", ctx, userId, data, name, description, hash)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileData indicates an expected call of CreateFileData.
func (mr *MockStoreDataMockRecorder) CreateFileData(ctx, userId, data, name, description, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileData", reflect.TypeOf((*MockStoreData)(nil).CreateFileData), ctx, userId, data, name, description, hash)
}

// CreateFileDataChunks mocks base method.
func (m *MockStoreData) CreateFileDataChunks(ctx context.Context, userId int64, data []byte, name, description, hash string, metaData *store.MetaData) (*store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileDataChunks", ctx, userId, data, name, description, hash, metaData)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileDataChunks indicates an expected call of CreateFileDataChunks.
func (mr *MockStoreDataMockRecorder) CreateFileDataChunks(ctx, userId, data, name, description, hash, metaData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileDataChunks", reflect.TypeOf((*MockStoreData)(nil).CreateFileDataChunks), ctx, userId, data, name, description, hash, metaData)
}

// GetData mocks base method.
func (m *MockStoreData) GetData(ctx context.Context, userId, usersDataId int64) (*store.UsersData, *store.DataFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, userId, usersDataId)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(*store.DataFile)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetData indicates an expected call of GetData.
func (mr *MockStoreDataMockRecorder) GetData(ctx, userId, usersDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockStoreData)(nil).GetData), ctx, userId, usersDataId)
}

// GetFileSize mocks base method.
func (m *MockStoreData) GetFileSize(ctx context.Context, userId, userDataId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSize", ctx, userId, userDataId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSize indicates an expected call of GetFileSize.
func (mr *MockStoreDataMockRecorder) GetFileSize(ctx, userId, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSize", reflect.TypeOf((*MockStoreData)(nil).GetFileSize), ctx, userId, userDataId)
}

// GetListData mocks base method.
func (m *MockStoreData) GetListData(ctx context.Context, userId int64) ([]store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListData", ctx, userId)
	ret0, _ := ret[0].([]store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListData indicates an expected call of GetListData.
func (mr *MockStoreDataMockRecorder) GetListData(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListData", reflect.TypeOf((*MockStoreData)(nil).GetListData), ctx, userId)
}

// GetMetaData mocks base method.
func (m *MockStoreData) GetMetaData(ctx context.Context, userId, userDataId int64) (*store.MetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaData", ctx, userId, userDataId)
	ret0, _ := ret[0].(*store.MetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaData indicates an expected call of GetMetaData.
func (mr *MockStoreDataMockRecorder) GetMetaData(ctx, userId, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaData", reflect.TypeOf((*MockStoreData)(nil).GetMetaData), ctx, userId, userDataId)
}

// RemoveData mocks base method.
func (m *MockStoreData) RemoveData(ctx context.Context, userId, usersDataId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveData", ctx, userId, usersDataId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveData indicates an expected call of RemoveData.
func (mr *MockStoreDataMockRecorder) RemoveData(ctx, userId, usersDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveData", reflect.TypeOf((*MockStoreData)(nil).RemoveData), ctx, userId, usersDataId)
}

// UpdateBinaryFile mocks base method.
func (m *MockStoreData) UpdateBinaryFile(ctx context.Context, userId, userDataId int64, data []byte, hash string, metaData []byte) (*store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinaryFile", ctx, userId, userDataId, data, hash, metaData)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBinaryFile indicates an expected call of UpdateBinaryFile.
func (mr *MockStoreDataMockRecorder) UpdateBinaryFile(ctx, userId, userDataId, data, hash, metaData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinaryFile", reflect.TypeOf((*MockStoreData)(nil).UpdateBinaryFile), ctx, userId, userDataId, data, hash, metaData)
}

// UpdateData mocks base method.
func (m *MockStoreData) UpdateData(ctx context.Context, userId, userDataId int64, data []byte, hash string) (*store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, userId, userDataId, data, hash)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockStoreDataMockRecorder) UpdateData(ctx, userId, userDataId, data, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockStoreData)(nil).UpdateData), ctx, userId, userDataId, data, hash)
}
