// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	server "GophKeeper/internal/Agent/server"
	store "GophKeeper/pkg/store"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GetJWTToken mocks base method.
func (m *MockAuthService) GetJWTToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWTToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJWTToken indicates an expected call of GetJWTToken.
func (mr *MockAuthServiceMockRecorder) GetJWTToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWTToken", reflect.TypeOf((*MockAuthService)(nil).GetJWTToken))
}

// SetJWTToken mocks base method.
func (m *MockAuthService) SetJWTToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetJWTToken", token)
}

// SetJWTToken indicates an expected call of SetJWTToken.
func (mr *MockAuthServiceMockRecorder) SetJWTToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJWTToken", reflect.TypeOf((*MockAuthService)(nil).SetJWTToken), token)
}

// SignIn mocks base method.
func (m *MockAuthService) SignIn(ctx context.Context, login, password string) (*server.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, login, password)
	ret0, _ := ret[0].(*server.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceMockRecorder) SignIn(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthService)(nil).SignIn), ctx, login, password)
}

// SignUp mocks base method.
func (m *MockAuthService) SignUp(ctx context.Context, login, password string) (*server.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, login, password)
	ret0, _ := ret[0].(*server.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceMockRecorder) SignUp(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthService)(nil).SignUp), ctx, login, password)
}

// MockDataInterface is a mock of DataInterface interface.
type MockDataInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataInterfaceMockRecorder
}

// MockDataInterfaceMockRecorder is the mock recorder for MockDataInterface.
type MockDataInterfaceMockRecorder struct {
	mock *MockDataInterface
}

// NewMockDataInterface creates a new mock instance.
func NewMockDataInterface(ctrl *gomock.Controller) *MockDataInterface {
	mock := &MockDataInterface{ctrl: ctrl}
	mock.recorder = &MockDataInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataInterface) EXPECT() *MockDataInterfaceMockRecorder {
	return m.recorder
}

// CheckUpdate mocks base method.
func (m *MockDataInterface) CheckUpdate(ctx context.Context, userDataid int64, updateAt *time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUpdate", ctx, userDataid, updateAt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUpdate indicates an expected call of CheckUpdate.
func (mr *MockDataInterfaceMockRecorder) CheckUpdate(ctx, userDataid, updateAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUpdate", reflect.TypeOf((*MockDataInterface)(nil).CheckUpdate), ctx, userDataid, updateAt)
}

// GetData mocks base method.
func (m *MockDataInterface) GetData(ctx context.Context, userDataId int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, userDataId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockDataInterfaceMockRecorder) GetData(ctx, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockDataInterface)(nil).GetData), ctx, userDataId)
}

// GetListData mocks base method.
func (m *MockDataInterface) GetListData(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListData", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListData indicates an expected call of GetListData.
func (mr *MockDataInterfaceMockRecorder) GetListData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListData", reflect.TypeOf((*MockDataInterface)(nil).GetListData), ctx)
}

// Ping mocks base method.
func (m *MockDataInterface) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDataInterfaceMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDataInterface)(nil).Ping), ctx)
}

// PostCrateFile mocks base method.
func (m *MockDataInterface) PostCrateFile(ctx context.Context, data *server.ReqData) (*server.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCrateFile", ctx, data)
	ret0, _ := ret[0].(*server.RespData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCrateFile indicates an expected call of PostCrateFile.
func (mr *MockDataInterfaceMockRecorder) PostCrateFile(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCrateFile", reflect.TypeOf((*MockDataInterface)(nil).PostCrateFile), ctx, data)
}

// PostCrateFileStartChunks mocks base method.
func (m *MockDataInterface) PostCrateFileStartChunks(ctx context.Context, data []byte, fileName, uuidChunk string, nStart, nEnd, maxSize int, reqData []byte) (string, *server.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCrateFileStartChunks", ctx, data, fileName, uuidChunk, nStart, nEnd, maxSize, reqData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*server.RespData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostCrateFileStartChunks indicates an expected call of PostCrateFileStartChunks.
func (mr *MockDataInterfaceMockRecorder) PostCrateFileStartChunks(ctx, data, fileName, uuidChunk, nStart, nEnd, maxSize, reqData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCrateFileStartChunks", reflect.TypeOf((*MockDataInterface)(nil).PostCrateFileStartChunks), ctx, data, fileName, uuidChunk, nStart, nEnd, maxSize, reqData)
}

// PostCredentials mocks base method.
func (m *MockDataInterface) PostCredentials(ctx context.Context, data *server.ReqData) (*server.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCredentials", ctx, data)
	ret0, _ := ret[0].(*server.RespData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCredentials indicates an expected call of PostCredentials.
func (mr *MockDataInterfaceMockRecorder) PostCredentials(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCredentials", reflect.TypeOf((*MockDataInterface)(nil).PostCredentials), ctx, data)
}

// PostCreditCard mocks base method.
func (m *MockDataInterface) PostCreditCard(ctx context.Context, data *server.ReqData) (*server.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCreditCard", ctx, data)
	ret0, _ := ret[0].(*server.RespData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCreditCard indicates an expected call of PostCreditCard.
func (mr *MockDataInterfaceMockRecorder) PostCreditCard(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCreditCard", reflect.TypeOf((*MockDataInterface)(nil).PostCreditCard), ctx, data)
}

// PostUpdateBinaryFile mocks base method.
func (m *MockDataInterface) PostUpdateBinaryFile(ctx context.Context, data []byte, fileName, uuidChunk string, nStart, nEnd, maxSize int, reqData []byte, userDataId int64) (string, *server.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUpdateBinaryFile", ctx, data, fileName, uuidChunk, nStart, nEnd, maxSize, reqData, userDataId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*server.RespData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostUpdateBinaryFile indicates an expected call of PostUpdateBinaryFile.
func (mr *MockDataInterfaceMockRecorder) PostUpdateBinaryFile(ctx, data, fileName, uuidChunk, nStart, nEnd, maxSize, reqData, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUpdateBinaryFile", reflect.TypeOf((*MockDataInterface)(nil).PostUpdateBinaryFile), ctx, data, fileName, uuidChunk, nStart, nEnd, maxSize, reqData, userDataId)
}

// PostUpdateData mocks base method.
func (m *MockDataInterface) PostUpdateData(ctx context.Context, userDataId int64, data []byte) (*server.RespData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUpdateData", ctx, userDataId, data)
	ret0, _ := ret[0].(*server.RespData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostUpdateData indicates an expected call of PostUpdateData.
func (mr *MockDataInterfaceMockRecorder) PostUpdateData(ctx, userDataId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUpdateData", reflect.TypeOf((*MockDataInterface)(nil).PostUpdateData), ctx, userDataId, data)
}

// MockStorageData is a mock of StorageData interface.
type MockStorageData struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDataMockRecorder
}

// MockStorageDataMockRecorder is the mock recorder for MockStorageData.
type MockStorageDataMockRecorder struct {
	mock *MockStorageData
}

// NewMockStorageData creates a new mock instance.
func NewMockStorageData(ctrl *gomock.Controller) *MockStorageData {
	mock := &MockStorageData{ctrl: ctrl}
	mock.recorder = &MockStorageDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageData) EXPECT() *MockStorageDataMockRecorder {
	return m.recorder
}

// CreateBinaryFile mocks base method.
func (m *MockStorageData) CreateBinaryFile(ctx context.Context, data []byte, userDataId int64, name, description, hash string, createdAt, UpdateAt *time.Time, metaData *store.MetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBinaryFile", ctx, data, userDataId, name, description, hash, createdAt, UpdateAt, metaData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBinaryFile indicates an expected call of CreateBinaryFile.
func (mr *MockStorageDataMockRecorder) CreateBinaryFile(ctx, data, userDataId, name, description, hash, createdAt, UpdateAt, metaData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBinaryFile", reflect.TypeOf((*MockStorageData)(nil).CreateBinaryFile), ctx, data, userDataId, name, description, hash, createdAt, UpdateAt, metaData)
}

// CreateCredentials mocks base method.
func (m *MockStorageData) CreateCredentials(ctx context.Context, data []byte, userDataId int64, name, description, hash string, createdAt, UpdateAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, data, userDataId, name, description, hash, createdAt, UpdateAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockStorageDataMockRecorder) CreateCredentials(ctx, data, userDataId, name, description, hash, createdAt, UpdateAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockStorageData)(nil).CreateCredentials), ctx, data, userDataId, name, description, hash, createdAt, UpdateAt)
}

// CreateCreditCard mocks base method.
func (m *MockStorageData) CreateCreditCard(ctx context.Context, data []byte, userDataId int64, name, description, hash string, createdAt, UpdateAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditCard", ctx, data, userDataId, name, description, hash, createdAt, UpdateAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCreditCard indicates an expected call of CreateCreditCard.
func (mr *MockStorageDataMockRecorder) CreateCreditCard(ctx, data, userDataId, name, description, hash, createdAt, UpdateAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditCard", reflect.TypeOf((*MockStorageData)(nil).CreateCreditCard), ctx, data, userDataId, name, description, hash, createdAt, UpdateAt)
}

// CreateFileData mocks base method.
func (m *MockStorageData) CreateFileData(ctx context.Context, data []byte, userDataId int64, name, description, hash string, createdAt, UpdateAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileData", ctx, data, userDataId, name, description, hash, createdAt, UpdateAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileData indicates an expected call of CreateFileData.
func (mr *MockStorageDataMockRecorder) CreateFileData(ctx, data, userDataId, name, description, hash, createdAt, UpdateAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileData", reflect.TypeOf((*MockStorageData)(nil).CreateFileData), ctx, data, userDataId, name, description, hash, createdAt, UpdateAt)
}

// GetData mocks base method.
func (m *MockStorageData) GetData(ctx context.Context, usersDataId int64) (*store.UsersData, *store.DataFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, usersDataId)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(*store.DataFile)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetData indicates an expected call of GetData.
func (mr *MockStorageDataMockRecorder) GetData(ctx, usersDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockStorageData)(nil).GetData), ctx, usersDataId)
}

// GetInfoData mocks base method.
func (m *MockStorageData) GetInfoData(ctx context.Context, userDataId int64) (*store.UsersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoData", ctx, userDataId)
	ret0, _ := ret[0].(*store.UsersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoData indicates an expected call of GetInfoData.
func (mr *MockStorageDataMockRecorder) GetInfoData(ctx, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoData", reflect.TypeOf((*MockStorageData)(nil).GetInfoData), ctx, userDataId)
}

// GetJWTToken mocks base method.
func (m *MockStorageData) GetJWTToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWTToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWTToken indicates an expected call of GetJWTToken.
func (mr *MockStorageDataMockRecorder) GetJWTToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWTToken", reflect.TypeOf((*MockStorageData)(nil).GetJWTToken), ctx)
}

// GetMetaData mocks base method.
func (m *MockStorageData) GetMetaData(ctx context.Context, userDataId int64) (*store.MetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaData", ctx, userDataId)
	ret0, _ := ret[0].(*store.MetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaData indicates an expected call of GetMetaData.
func (mr *MockStorageDataMockRecorder) GetMetaData(ctx, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaData", reflect.TypeOf((*MockStorageData)(nil).GetMetaData), ctx, userDataId)
}

// SetJWTToken mocks base method.
func (m *MockStorageData) SetJWTToken(ctx context.Context, JWTToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJWTToken", ctx, JWTToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJWTToken indicates an expected call of SetJWTToken.
func (mr *MockStorageDataMockRecorder) SetJWTToken(ctx, JWTToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJWTToken", reflect.TypeOf((*MockStorageData)(nil).SetJWTToken), ctx, JWTToken)
}

// UpdateData mocks base method.
func (m *MockStorageData) UpdateData(ctx context.Context, dataId int64, data []byte, hash string, updateAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, dataId, data, hash, updateAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockStorageDataMockRecorder) UpdateData(ctx, dataId, data, hash, updateAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockStorageData)(nil).UpdateData), ctx, dataId, data, hash, updateAt)
}

// UpdateDataBinary mocks base method.
func (m *MockStorageData) UpdateDataBinary(ctx context.Context, userDataId int64, data []byte, hash string, updateAt *time.Time, metaData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataBinary", ctx, userDataId, data, hash, updateAt, metaData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDataBinary indicates an expected call of UpdateDataBinary.
func (mr *MockStorageDataMockRecorder) UpdateDataBinary(ctx, userDataId, data, hash, updateAt, metaData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataBinary", reflect.TypeOf((*MockStorageData)(nil).UpdateDataBinary), ctx, userDataId, data, hash, updateAt, metaData)
}

// MockEncrypter is a mock of Encrypter interface.
type MockEncrypter struct {
	ctrl     *gomock.Controller
	recorder *MockEncrypterMockRecorder
}

// MockEncrypterMockRecorder is the mock recorder for MockEncrypter.
type MockEncrypterMockRecorder struct {
	mock *MockEncrypter
}

// NewMockEncrypter creates a new mock instance.
func NewMockEncrypter(ctrl *gomock.Controller) *MockEncrypter {
	mock := &MockEncrypter{ctrl: ctrl}
	mock.recorder = &MockEncrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncrypter) EXPECT() *MockEncrypterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncrypter) Decrypt(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncrypterMockRecorder) Decrypt(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncrypter)(nil).Decrypt), data)
}

// DecryptFile mocks base method.
func (m *MockEncrypter) DecryptFile(inputFilePath, outputFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptFile", inputFilePath, outputFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecryptFile indicates an expected call of DecryptFile.
func (mr *MockEncrypterMockRecorder) DecryptFile(inputFilePath, outputFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptFile", reflect.TypeOf((*MockEncrypter)(nil).DecryptFile), inputFilePath, outputFilePath)
}

// Encrypt mocks base method.
func (m *MockEncrypter) Encrypt(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncrypterMockRecorder) Encrypt(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncrypter)(nil).Encrypt), data)
}

// EncryptFile mocks base method.
func (m *MockEncrypter) EncryptFile(inputFilePath, outputFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptFile", inputFilePath, outputFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncryptFile indicates an expected call of EncryptFile.
func (mr *MockEncrypterMockRecorder) EncryptFile(inputFilePath, outputFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptFile", reflect.TypeOf((*MockEncrypter)(nil).EncryptFile), inputFilePath, outputFilePath)
}

// MockUseCaser is a mock of UseCaser interface.
type MockUseCaser struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaserMockRecorder
}

// MockUseCaserMockRecorder is the mock recorder for MockUseCaser.
type MockUseCaserMockRecorder struct {
	mock *MockUseCaser
}

// NewMockUseCaser creates a new mock instance.
func NewMockUseCaser(ctrl *gomock.Controller) *MockUseCaser {
	mock := &MockUseCaser{ctrl: ctrl}
	mock.recorder = &MockUseCaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaser) EXPECT() *MockUseCaserMockRecorder {
	return m.recorder
}

// CheckNewData mocks base method.
func (m *MockUseCaser) CheckNewData(ctx context.Context, userDataId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNewData", ctx, userDataId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNewData indicates an expected call of CheckNewData.
func (mr *MockUseCaserMockRecorder) CheckNewData(ctx, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNewData", reflect.TypeOf((*MockUseCaser)(nil).CheckNewData), ctx, userDataId)
}

// CreateBinaryFile mocks base method.
func (m *MockUseCaser) CreateBinaryFile(ctx context.Context, path, name, description string, ch chan<- string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBinaryFile", ctx, path, name, description, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBinaryFile indicates an expected call of CreateBinaryFile.
func (mr *MockUseCaserMockRecorder) CreateBinaryFile(ctx, path, name, description, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBinaryFile", reflect.TypeOf((*MockUseCaser)(nil).CreateBinaryFile), ctx, path, name, description, ch)
}

// CreateCredentials mocks base method.
func (m *MockUseCaser) CreateCredentials(ctx context.Context, data *server.ReqData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockUseCaserMockRecorder) CreateCredentials(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockUseCaser)(nil).CreateCredentials), ctx, data)
}

// CreateCreditCard mocks base method.
func (m *MockUseCaser) CreateCreditCard(ctx context.Context, data *server.ReqData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditCard", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCreditCard indicates an expected call of CreateCreditCard.
func (mr *MockUseCaserMockRecorder) CreateCreditCard(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditCard", reflect.TypeOf((*MockUseCaser)(nil).CreateCreditCard), ctx, data)
}

// CreateFileData mocks base method.
func (m *MockUseCaser) CreateFileData(ctx context.Context, data *server.ReqData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileData indicates an expected call of CreateFileData.
func (mr *MockUseCaserMockRecorder) CreateFileData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileData", reflect.TypeOf((*MockUseCaser)(nil).CreateFileData), ctx, data)
}

// GetData mocks base method.
func (m *MockUseCaser) GetData(ctx context.Context, userDataId int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, userDataId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockUseCaserMockRecorder) GetData(ctx, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockUseCaser)(nil).GetData), ctx, userDataId)
}

// GetDataFromAgentStorage mocks base method.
func (m *MockUseCaser) GetDataFromAgentStorage(ctx context.Context, userDataId int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromAgentStorage", ctx, userDataId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFromAgentStorage indicates an expected call of GetDataFromAgentStorage.
func (mr *MockUseCaserMockRecorder) GetDataFromAgentStorage(ctx, userDataId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromAgentStorage", reflect.TypeOf((*MockUseCaser)(nil).GetDataFromAgentStorage), ctx, userDataId)
}

// GetListData mocks base method.
func (m *MockUseCaser) GetListData(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListData", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListData indicates an expected call of GetListData.
func (mr *MockUseCaserMockRecorder) GetListData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListData", reflect.TypeOf((*MockUseCaser)(nil).GetListData), ctx)
}

// PingServer mocks base method.
func (m *MockUseCaser) PingServer(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingServer", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PingServer indicates an expected call of PingServer.
func (mr *MockUseCaserMockRecorder) PingServer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingServer", reflect.TypeOf((*MockUseCaser)(nil).PingServer), ctx)
}

// SignIn mocks base method.
func (m *MockUseCaser) SignIn(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUseCaserMockRecorder) SignIn(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUseCaser)(nil).SignIn), ctx, username, password)
}

// SignUp mocks base method.
func (m *MockUseCaser) SignUp(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUseCaserMockRecorder) SignUp(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUseCaser)(nil).SignUp), ctx, username, password)
}

// UpdateBinaryFile mocks base method.
func (m *MockUseCaser) UpdateBinaryFile(ctx context.Context, path string, userDataId int64, ch chan<- string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinaryFile", ctx, path, userDataId, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBinaryFile indicates an expected call of UpdateBinaryFile.
func (mr *MockUseCaserMockRecorder) UpdateBinaryFile(ctx, path, userDataId, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinaryFile", reflect.TypeOf((*MockUseCaser)(nil).UpdateBinaryFile), ctx, path, userDataId, ch)
}

// UpdateData mocks base method.
func (m *MockUseCaser) UpdateData(ctx context.Context, userDataId int64, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, userDataId, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockUseCaserMockRecorder) UpdateData(ctx, userDataId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockUseCaser)(nil).UpdateData), ctx, userDataId, data)
}
